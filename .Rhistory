newMedian <- median(newTotalSteps)
newMedian
```
Compare them with the two before imputing missing data:
```{r}
oldMean <- mean(totalSteps)
oldMedian <- median(totalSteps)
newMean - oldMean
newMedian - oldMedian
```
So, after imputing the missing data, the new mean of total steps taken per day is the same as that of the old mean; the new median of total steps taken per day is greater than that of the old median.
### Are there differences in activity patterns between weekdays and weekends?
* Create a new factor variable in the dataset with two levels -- "weekday" and "weekend" indicating whether a given date is a weekday or weekend day.
```{r}
head(newData)
newData$weekdays <- factor(format(newData$date, "%A"))
levels(newData$weekdays)
levels(newData$weekdays) <- list(weekday = c("Monday", "Tuesday",
"Wednesday",
"Thursday", "Friday"),
weekend = c("Saturday", "Sunday"))
levels(newData$weekdays)
table(newData$weekdays)
```
* Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis).
```{r}
avgSteps <- aggregate(newData$steps,
list(interval = as.numeric(as.character(newData$interval)),
weekdays = newData$weekdays),
FUN = "mean")
names(avgSteps)[3] <- "meanOfSteps"
library(lattice)
xyplot(avgSteps$meanOfSteps ~ avgSteps$interval | avgSteps$weekdays,
layout = c(1, 2), type = "l",
xlab = "Interval", ylab = "Number of steps")
```
---
output:
html_document: default
---
# Reproducible Research: Peer Assessment 1
Hi! Thanks for taking the time to review this assessment! We will require
the `ggplot2` and `data.table` libraries to knit this R Markdown document
```{r, echo=TRUE}
library(ggplot2)
library(data.table)
```
## Loading and preprocessing the data
First of all, we will extract the ZIP file with the activity date and load it up
on a data.frame object. We will pre-process and extract the step counts and intervals
as `numeric` and the date information as a `Date` object to make computation easier
```{r, echo=TRUE}
df.activity = read.csv(unz("activity.zip", "activity.csv"), header=T,
sep=",", stringsAsFactors=F, na.strings="NA",
colClasses=c("numeric", "Date", "numeric"))
dt.activity = data.table(df.activity)
rm(df.activity)
dt.activity
```
## What is mean total number of steps taken per day?
First of all, we need to combine all the steps that happened on each day
```{r, echo=TRUE}
dt.totalsteps = dt.activity[, sum(steps, na.rm=T), by="date"]
head(dt.totalsteps)
```
We can then create an histogram with the total steps data, and calculate their *mean*
and *median* values, while ignoring missing values of the data
```{r, echo=TRUE}
qplot(dt.totalsteps$V1, geom="histogram", binwidth=3000,
main="Total Number of Steps per Day", xlab="Steps", fill=..count..)
median(dt.totalsteps$V1)
mean(dt.totalsteps$V1)
```
## What is the average daily activity pattern?
This time, instead of combining per day, we will combine the steps by each interval
that we have available. on the dataset.
```{r, echo=TRUE}
dt.pattern = dt.activity[, sum(steps, na.rm=T)/.N, by="interval"]
head(dt.pattern)
```
Now, we create a plot to help us visualize the pattern of daily activity averaged
over all the days.
```{r, echo=TRUE}
qplot(interval, V1, data = dt.pattern, xlab="Interval", ylab="Number of Steps",
color=I("red"),  geom = "line", main="Daily Activity Pattern")
```
We can also figure out which interval is the one that contains the maximum number
of stepts across all the days.
```{r, echo=TRUE}
dt.pattern[V1 == max(dt.pattern$V1)]$interval
```
## Imputing missing values
First, let us verify what is the number of missing values in the dataset.
```{r, echo=TRUE}
sum(is.na(dt.activity$steps))
```
We will fill these missing vaules by using the mean of the specific 5-minute interval
as a replacement for the missing value. I already have these quantities calculated
in the `dt.pattern` table.
```{r, echo=TRUE}
dt.nomissing = copy(dt.activity)
dt.nomissing[is.na(steps), steps := dt.pattern[dt.pattern$interval == interval]$V1]
sum(is.na(dt.nomissing$steps))
```
Now, we again create an histogram with the total steps data, and calculate their *mean*
and *median* values to verify the changes we made on the dataset.
```{r, echo=TRUE}
dt.totalsteps.noNA = dt.nomissing[, sum(steps, na.rm=T), by="date"]
head(dt.totalsteps.noNA)
qplot(dt.totalsteps.noNA$V1, geom="histogram", binwidth=3000,
main="Total Number of Steps per Day (no NAs)", xlab="Steps", fill=..count..)
median(dt.totalsteps.noNA$V1)
mean(dt.totalsteps.noNA$V1)
```
As a result from this change, the mean got really close to the median, and the
shape of the histogram got much closer to a bell shape. The concentration of
days with less then 3000 steps got really small, as most of them were filled with
missing values, and that went to the bucket that contains the mean and median.
## Are there differences in activity patterns between weekdays and weekends?
First, let us separate our dates in weekdays and weekends so we can start splitting
the interval counts among them. For this we will create a factor variable and
add it to the dataset
```{r, echo=TRUE}
activity.weekdays = weekdays(dt.activity$date)
factor.weekday = factor( ifelse(activity.weekdays == "Saturday"
| activity.weekdays == "Sunday",
"weekend",
"weekday"),
levels = c("weekend","weekday"))
dt.activity[, weekstatus := factor.weekday]
```
We then proceed to do some aggregating magic with our data.table
```{r, echo=TRUE}
dt.pattern.week = dt.activity[, sum(steps, na.rm=T)/.N, by=c("weekstatus", "interval")]
head(dt.pattern.week)
```
Now, we create a plot to help us visualize the pattern of daily activity averaged
over weekends and weekdays.
```{r, echo=TRUE}
qplot(interval, V1, data = dt.pattern.week, facets = weekstatus ~ .,
xlab="Interval", ylab="Number of Steps",
color=I("red"),  geom = "line", main="Daily Activity Pattern")
``````
---
output:
html_document:
fig_caption: yes
---
# Reproducible Research: Peer Assessment 1
Author: girishbabu
Version: 08/16/2014
Load the ggplot2 & data.table libraries to generate the plots
```{r, echo=TRUE}
library(ggplot2)
library(data.table)
```
## Loading and preprocessing the data
Extract the activity.zip file with the date and load to a data.frame object. Extract the step counts as numeric and intervals as date
```{r, echo=TRUE}
df.activity = read.csv(unz("activity.zip", "activity.csv"), header=T,
sep=",", stringsAsFactors=F, na.strings="NA",
colClasses=c("numeric", "Date", "numeric"))
dt.activity = data.table(df.activity)
rm(df.activity)
dt.activity
```
## What is mean total number of steps taken per day?
Combine the steps per day
```{r, echo=TRUE}
dt.totalsteps = dt.activity[, sum(steps, na.rm=T), by="date"]
head(dt.totalsteps)
```
Create a histogram with the total steps data, and calculate their mean and median values
```{r, echo=TRUE}
qplot(dt.totalsteps$V1, geom="histogram", binwidth=1000,
main="Total number of steps per day", xlab="Steps", fill=..count..)
median(dt.totalsteps$V1)
mean(dt.totalsteps$V1)
```
## What is the average daily activity pattern?
Combine the steps by each interval that we have available in the dataset
```{r, echo=TRUE}
dt.pattern = dt.activity[, sum(steps, na.rm=T)/.N, by="interval"]
head(dt.pattern)
```
Plot the pattern of daily activity averaged over all days
```{r, echo=TRUE}
qplot(interval, V1, data = dt.pattern, xlab="Interval", ylab="Number of Steps",
color=I("red"),  geom = "line", main="Daily Activity Pattern")
```
We can also figure out which interval is the one that contains the maximum number
of stepts across all the days.
```{r, echo=TRUE}
dt.pattern[V1 == max(dt.pattern$V1)]$interval
```
## Imputing missing values
First, let us verify what is the number of missing values in the dataset.
```{r, echo=TRUE}
sum(is.na(dt.activity$steps))
```
We will fill these missing vaules by using the mean of the specific 5-minute interval
as a replacement for the missing value. I already have these quantities calculated
in the `dt.pattern` table.
```{r, echo=TRUE}
dt.nomissing = copy(dt.activity)
dt.nomissing[is.na(steps), steps := dt.pattern[dt.pattern$interval == interval]$V1]
sum(is.na(dt.nomissing$steps))
```
Now, we again create an histogram with the total steps data, and calculate their *mean*
and *median* values to verify the changes we made on the dataset.
```{r, echo=TRUE}
dt.totalsteps.noNA = dt.nomissing[, sum(steps, na.rm=T), by="date"]
head(dt.totalsteps.noNA)
qplot(dt.totalsteps.noNA$V1, geom="histogram", binwidth=3000,
main="Total Number of Steps per Day (no NAs)", xlab="Steps", fill=..count..)
median(dt.totalsteps.noNA$V1)
mean(dt.totalsteps.noNA$V1)
```
As a result from this change, the mean got really close to the median, and the
shape of the histogram got much closer to a bell shape. The concentration of
days with less then 3000 steps got really small, as most of them were filled with
missing values, and that went to the bucket that contains the mean and median.
## Are there differences in activity patterns between weekdays and weekends?
First, let us separate our dates in weekdays and weekends so we can start splitting
the interval counts among them. For this we will create a factor variable and
add it to the dataset
```{r, echo=TRUE}
activity.weekdays = weekdays(dt.activity$date)
factor.weekday = factor( ifelse(activity.weekdays == "Saturday"
| activity.weekdays == "Sunday",
"weekend",
"weekday"),
levels = c("weekend","weekday"))
dt.activity[, weekstatus := factor.weekday]
```
We then proceed to do some aggregating magic with our data.table
```{r, echo=TRUE}
dt.pattern.week = dt.activity[, sum(steps, na.rm=T)/.N, by=c("weekstatus", "interval")]
head(dt.pattern.week)
```
Now, we create a plot to help us visualize the pattern of daily activity averaged
over weekends and weekdays.
```{r, echo=TRUE}
qplot(interval, V1, data = dt.pattern.week, facets = weekstatus ~ .,
xlab="Interval", ylab="Number of Steps",
color=I("red"),  geom = "line", main="Daily Activity Pattern")
``````
df.activity = read.csv(unz("activity.zip", "activity.csv"), header=T,
sep=",", stringsAsFactors=F, na.strings="NA",
colClasses=c("numeric", "Date", "numeric"))
dfactivity = read.csv(unz("activity.zip", "activity.csv"), header=T,
sep=",", stringsAsFactors=F, na.strings="NA",
colClasses=c("numeric", "Date", "numeric"))
df.activity = read.csv(unz("activity.zip", "activity.csv"), header=T,
sep=",", stringsAsFactors=F, na.strings="NA",
colClasses=c("numeric", "Date", "numeric"))
---
output:
html_document:
fig_caption: yes
---
# Reproducible Research: Peer Assessment 1
Author: girishbabu
Version: 08/16/2014
Load the ggplot2 & data.table libraries to generate the plots
```{r, echo=TRUE}
library(ggplot2)
library(data.table)
```
## Loading and preprocessing the data
Extract the activity.zip file with the date and load to a data.frame object. Extract the step counts as numeric and intervals as date
```{r, echo=TRUE}
df.activity = read.csv(unz("activity.zip", "activity.csv"), header=T,
sep=",", stringsAsFactors=F, na.strings="NA",
colClasses=c("numeric", "Date", "numeric"))
dt.activity = data.table(df.activity)
rm(df.activity)
dt.activity
```
## What is mean total number of steps taken per day?
Combine the steps per day
```{r, echo=TRUE}
dt.totalsteps = dt.activity[, sum(steps, na.rm=T), by="date"]
head(dt.totalsteps)
```
Create a histogram with the total steps data, and calculate their mean and median values
```{r, echo=TRUE}
qplot(dt.totalsteps$V1, geom="histogram", binwidth=1000,
main="Total number of steps per day", xlab="Steps", fill=..count..)
median(dt.totalsteps$V1)
mean(dt.totalsteps$V1)
```
## What is the average daily activity pattern?
Combine the steps by each interval that we have available in the dataset
```{r, echo=TRUE}
dt.pattern = dt.activity[, sum(steps, na.rm=T)/.N, by="interval"]
head(dt.pattern)
```
Plot the pattern of daily activity averaged over all days
```{r, echo=TRUE}
qplot(interval, V1, data = dt.pattern, xlab="Interval", ylab="Number of Steps",
color=I("red"),  geom = "line", main="Daily Activity Pattern")
```
We can also figure out which interval is the one that contains the maximum number
of stepts across all the days.
```{r, echo=TRUE}
dt.pattern[V1 == max(dt.pattern$V1)]$interval
```
## Imputing missing values
First, let us verify what is the number of missing values in the dataset.
```{r, echo=TRUE}
sum(is.na(dt.activity$steps))
```
We will fill these missing vaules by using the mean of the specific 5-minute interval
as a replacement for the missing value. I already have these quantities calculated
in the `dt.pattern` table.
```{r, echo=TRUE}
dt.nomissing = copy(dt.activity)
dt.nomissing[is.na(steps), steps := dt.pattern[dt.pattern$interval == interval]$V1]
sum(is.na(dt.nomissing$steps))
```
Now, we again create an histogram with the total steps data, and calculate their *mean*
and *median* values to verify the changes we made on the dataset.
```{r, echo=TRUE}
dt.totalsteps.noNA = dt.nomissing[, sum(steps, na.rm=T), by="date"]
head(dt.totalsteps.noNA)
qplot(dt.totalsteps.noNA$V1, geom="histogram", binwidth=3000,
main="Total Number of Steps per Day (no NAs)", xlab="Steps", fill=..count..)
median(dt.totalsteps.noNA$V1)
mean(dt.totalsteps.noNA$V1)
```
As a result from this change, the mean got really close to the median, and the
shape of the histogram got much closer to a bell shape. The concentration of
days with less then 3000 steps got really small, as most of them were filled with
missing values, and that went to the bucket that contains the mean and median.
## Are there differences in activity patterns between weekdays and weekends?
First, let us separate our dates in weekdays and weekends so we can start splitting
the interval counts among them. For this we will create a factor variable and
add it to the dataset
```{r, echo=TRUE}
activity.weekdays = weekdays(dt.activity$date)
factor.weekday = factor( ifelse(activity.weekdays == "Saturday"
| activity.weekdays == "Sunday",
"weekend",
"weekday"),
levels = c("weekend","weekday"))
dt.activity[, weekstatus := factor.weekday]
```
We then proceed to do some aggregating magic with our data.table
```{r, echo=TRUE}
dt.pattern.week = dt.activity[, sum(steps, na.rm=T)/.N, by=c("weekstatus", "interval")]
head(dt.pattern.week)
```
Now, we create a plot to help us visualize the pattern of daily activity averaged
over weekends and weekdays.
```{r, echo=TRUE}
qplot(interval, V1, data = dt.pattern.week, facets = weekstatus ~ .,
xlab="Interval", ylab="Number of Steps",
color=I("red"),  geom = "line", main="Daily Activity Pattern")
``````
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
data <- read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
We calculate the total number of steps for each day.
```{r}
daily_total <- tapply(data$steps, data$date, sum)
```
Here is a histogram of the total number of steps taken each day.
```{r}
hist(daily_total, xlab="Daily total number of steps")
```
We calculate the mean and median.
```{r}
mean_per_day <- mean(daily_total, na.rm=TRUE)
median_per_day <- median(daily_total, na.rm=TRUE)
```
The mean is `r mean_per_day` and the median is `r median_per_day`.
## What is the average daily activity pattern?
We average the steps in each 5 minute interval over all days
```{r}
interval_mean <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
intervals <- data$interval[1:288]
```
We plot this as a time-series plot:
```{r}
plot(intervals, interval_mean, type="l", xlab="Interval", ylab="Mean number of steps")
```
```{r}
m <- intervals[which.max(interval_mean)]
```
The interval `r m` contains the maximum number of steps on average.
## Imputing missing values
```{r}
n <- sum(is.na(data$steps))
```
The total number of missing values is `r n`.
I fill the missing values with the average number of steps in that interval
```{r}
for (i in 1:length(data$steps)) {
if (is.na(data$steps[i])) {
data$steps[i] <- mean(data$steps[data$interval == data$interval[i]], na.rm=TRUE)
}
}
```
Here is a histogram of the total number of steps taken each day.
```{r}
daily_total <- tapply(data$steps, data$date, sum)
hist(daily_total)
```
We calculate the mean and median.
```{r}
mean_per_day <- mean(daily_total, na.rm=TRUE)
median_per_day <- median(daily_total, na.rm=TRUE)
```
The mean is `r mean_per_day` and the median is `r median_per_day`.
The mean is the same as without the imputed values, but the median has changed slightly.
## Are there differences in activity patterns between weekdays and weekends?
```{r}
wd <- weekdays(as.Date(data$date))
weekend <- (wd == "Saturday" | wd == "Sunday")
weekend_mean <- tapply(data$steps[weekend], data$interval[weekend], mean)
weekday_mean <- tapply(data$steps[!weekend], data$interval[!weekend], mean)
par(mfrow=c(2,1))
plot(intervals, weekend_mean, type="l", xlab="Interval", ylab="Number of steps", main="weekend")
plot(intervals, weekday_mean, type="l", xlab="Interval", ylab="Number of steps", main="weekday")
```
data <- read.csv("activity.csv")
daily_total <- tapply(data$steps, data$date, sum)
hist(daily_total, xlab="Daily total number of steps")
mean_per_day <- mean(daily_total, na.rm=TRUE)
median_per_day <- median(daily_total, na.rm=TRUE)
```
interval_mean <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
intervals <- data$interval[1:288]
plot(intervals, interval_mean, type="l", xlab="Interval", ylab="Mean number of steps")
m <- intervals[which.max(interval_mean)]
n <- sum(is.na(data$steps))
for (i in 1:length(data$steps)) {
if (is.na(data$steps[i])) {
data$steps[i] <- mean(data$steps[data$interval == data$interval[i]], na.rm=TRUE)
}
}
daily_total <- tapply(data$steps, data$date, sum)
hist(daily_total)
mean_per_day <- mean(daily_total, na.rm=TRUE)
median_per_day <- median(daily_total, na.rm=TRUE)
wd <- weekdays(as.Date(data$date))
weekend <- (wd == "Saturday" | wd == "Sunday")
weekend_mean <- tapply(data$steps[weekend], data$interval[weekend], mean)
weekday_mean <- tapply(data$steps[!weekend], data$interval[!weekend], mean)
par(mfrow=c(2,1))
plot(intervals, weekend_mean, type="l", xlab="Interval", ylab="Number of steps", main="weekend")
plot(intervals, weekday_mean, type="l", xlab="Interval", ylab="Number of steps", main="weekday")
## ----loaddata------------------------------------------------------------
unzip(zipfile="activity.zip")
data <- read.csv("activity.csv")
## ------------------------------------------------------------------------
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
## ------------------------------------------------------------------------
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
## ------------------------------------------------------------------------
averages[which.max(averages$steps),]
## ----how_many_missing----------------------------------------------------
missing <- is.na(data$steps)
# How many missing
table(missing)
## ------------------------------------------------------------------------
# Replace each missing value with the mean value of its 5-minute interval
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
## ------------------------------------------------------------------------
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
## ------------------------------------------------------------------------
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
## ------------------------------------------------------------------------
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
